{"/home/travis/build/npmtest/node-npmtest-ember-fullcalendar/test.js":"/* istanbul instrument in package npmtest_ember_fullcalendar */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-fullcalendar/lib.npmtest_ember_fullcalendar.js":"/* istanbul instrument in package npmtest_ember_fullcalendar */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_fullcalendar = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_fullcalendar = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-fullcalendar/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-fullcalendar && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_fullcalendar */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_fullcalendar\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_fullcalendar.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_fullcalendar.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_fullcalendar.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_fullcalendar.__dirname + '/lib.npmtest_ember_fullcalendar.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-fullcalendar/node_modules/ember-fullcalendar/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-fullcalendar',\n\n  // isDevelopingAddon: function() {\n  //   return true;\n  // },\n\n  options: {\n    nodeAssets: {\n      'fullcalendar': function() {\n        return {\n          enabled: !process.env.EMBER_CLI_FASTBOOT,\n          srcDir: 'dist',\n          import: ['fullcalendar.js', 'fullcalendar.css']\n        }\n      },\n      'fullcalendar-scheduler': function() {\n        return {\n          enabled: !process.env.EMBER_CLI_FASTBOOT && this.includeScheduler,\n          srcDir: 'dist',\n          import: ['scheduler.js', 'scheduler.css']\n        }\n      }\n    }\n  },\n\n  included: function(app, parentAddon) {\n\n    var target = parentAddon || app;\n\n    // allow addon to be nested - see: https://github.com/ember-cli/ember-cli/issues/3718\n    if (target.app) {\n      target = target.app;\n    }\n\n    var config = target.project.config(target.env) || {};\n\n    // Add scheduler to executable unless configured not to.\n    if (config.emberFullCalendar && config.emberFullCalendar.includeScheduler === true) {\n      this.includeScheduler = true;\n    } else {\n      this.includeScheduler = false;\n    }\n\n    this._super.included.apply(this, arguments);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-fullcalendar/node_modules/ember-fullcalendar/config/environment.js":"/*jshint node:true*/\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-fullcalendar/node_modules/ember-fullcalendar/addon/components/full-calendar.js":"import Ember from 'ember';\nimport layout from '../templates/components/full-calendar';\nimport { InvokeActionMixin } from 'ember-invoke-action';\n\nconst { assign, observer, computed, getOwner } = Ember;\n\nexport default Ember.Component.extend(InvokeActionMixin, {\n\n  /////////////////////////////////////\n  // PROPERTIES\n  /////////////////////////////////////\n\n  layout: layout,\n  classNames: ['full-calendar'],\n\n  /////////////////////////////////////\n  // FULLCALENDAR OPTIONS\n  /////////////////////////////////////\n\n  // scheduler defaults to non-commercial license\n  schedulerLicenseKey: computed(function() {\n\n    // load the consuming app's config\n    const applicationConfig = getOwner(this).resolveRegistration('config:environment');\n    const defaultSchedulerLicenseKey = 'CC-Attribution-NonCommercial-NoDerivatives';\n\n    if (applicationConfig &&\n        applicationConfig.emberFullCalendar &&\n        applicationConfig.emberFullCalendar.schedulerLicenseKey) {\n      return applicationConfig.emberFullCalendar.schedulerLicenseKey;\n    }\n\n    return defaultSchedulerLicenseKey;\n  }),\n\n  fullCalendarOptions: [\n    // general display\n    'header', 'footer', 'customButtons', 'buttonIcons', 'theme', 'themeButtonIcons', 'firstDay', 'isRTL', 'weekends', 'hiddenDays',\n    'fixedWeekCount', 'weekNumbers', 'weekNumberCalculation', 'businessHours', 'height', 'contentHeight', 'aspectRatio',\n    'handleWindowResize', 'eventLimit', 'weekNumbersWithinDays', 'showNonCurrentDates',\n\n    // clicking & hovering\n    'navLinks',\n\n    // timezone\n    'timezone', 'now',\n\n    // views\n    'views',\n\n    // agenda options\n    'allDaySlot', 'allDayText', 'slotDuration', 'slotLabelFormat', 'slotLabelInterval', 'snapDuration', 'scrollTime',\n    'minTime', 'maxTime', 'slotEventOverlap',\n\n    // list options\n    'listDayFormat', 'listDayAltFormat', 'noEventsMessage',\n\n    // current date\n    'nowIndicator', 'visibleRange', 'validRange', 'dateIncrement', 'dateAlignment', 'duration', 'dayCount',\n\n    // text/time customization\n    'locale', 'timeFormat', 'columnFormat', 'titleFormat', 'buttonText', 'monthNames', 'monthNamesShort', 'dayNames',\n    'dayNamesShort', 'weekNumberTitle', 'displayEventTime', 'displayEventEnd', 'eventLimitText', 'dayPopoverFormat',\n\n    // selection\n    'selectable', 'selectHelper', 'unselectAuto', 'unselectCancel', 'selectOverlap', 'selectConstraint', 'selectAllow',\n    'selectMinDistance', 'selectLongPressDelay',\n\n    // event data\n    'events', 'eventSources', 'allDayDefault', 'startParam', 'endParam', 'timezoneParam', 'lazyFetching',\n    'defaultTimedEventDuration', 'defaultAllDayEventDuration', 'forceEventDuration',\n\n    // event rendering\n    'eventColor', 'eventBackgroundColor', 'eventBorderColor', 'eventTextColor', 'nextDayThreshold', 'eventOrder',\n    'eventRenderWait',\n\n    // event dragging & resizing\n    'editable', 'eventStartEditable', 'eventDurationEditable', 'dragRevertDuration', 'dragOpacity', 'dragScroll',\n    'eventOverlap', 'eventConstraint', 'eventAllow', 'longPressDelay', 'eventLongPressDelay',\n\n    // dropping external elements\n    'droppable', 'dropAccept',\n\n    // timeline view\n    'resourceAreaWidth', 'resourceLabelText', 'resourceColumns', 'slotWidth',\n\n    // resource data\n    'resources', 'eventResourceField', 'refetchResourcesOnNavigate',\n\n    // resource rendering\n    'resourceOrder', 'resourceGroupField', 'resourceGroupText', 'filterResourcesWithEvents',\n\n    // vertical resource view\n    'groupByResource', 'groupByDateAndResource'\n  ],\n\n  fullCalendarEvents: [\n    // general display\n    'viewRender', 'viewDestroy', 'dayRender', 'windowResize',\n\n    // clicking and hovering\n    'dayClick', 'eventClick', 'eventMouseover', 'eventMouseout', 'navLinkDayClick', 'navLinkWeekClick',\n\n    // selection\n    'select', 'unselect',\n\n    // event data\n    'eventDataTransform', 'loading',\n\n    // event rendering\n    'eventRender', 'eventAfterRender', 'eventAfterAllRender', 'eventDestroy',\n    'eventLimitClick',\n\n    // event dragging & resizing\n    'eventDragStart', 'eventDragStop', 'eventDrop', 'eventResizeStart', 'eventResizeStop', 'eventResize',\n\n    // dropping external events\n    'drop', 'eventReceive',\n\n    // resource rendering\n    'resourceText', 'resourceRender'\n  ],\n\n  /////////////////////////////////////\n  // SETUP/TEARDOWN\n  /////////////////////////////////////\n\n  didInsertElement() {\n\n    const options =\n      assign(\n        this.get('options'),\n        this.get('hooks')\n      );\n\n    // Temporary patch for `eventDataTransform` method throwing error\n    options.eventDataTransform = this.get('eventDataTransform');\n\n    // add the license key for the scheduler\n    options.schedulerLicenseKey = this.get('schedulerLicenseKey');\n\n    this.$().fullCalendar(options);\n  },\n\n  willDestroyElement() {\n    this.$().fullCalendar('destroy');\n  },\n\n  /////////////////////////////////////\n  // COMPUTED PROPERTIES\n  /////////////////////////////////////\n\n  /**\n   * Returns all of the valid Fullcalendar options that\n   * were passed into the component.\n   */\n  options: computed(function() {\n\n    const fullCalendarOptions = this.get('fullCalendarOptions');\n    const options = {};\n\n    // Apply FullCalendar options based on property name\n    fullCalendarOptions.forEach(optionName => {\n      if (this.get(optionName) !== undefined) {\n        options[optionName] = this.get(optionName);\n      }\n    });\n\n    // Handle overriden properties\n    if (this.get('viewName') !== undefined) {\n      options['defaultView'] = this.get('viewName');\n    }\n\n    if (this.get('date') !== undefined) {\n      options['defaultDate'] = this.get('date');\n    }\n\n    return options;\n  }),\n\n  /**\n   * Returns all of the valid Fullcalendar callback event\n   * names that were passed into the component.\n   */\n  usedEvents: computed('fullCalendarEvents', function() {\n    return this.get('fullCalendarEvents').filter(eventName => {\n      const methodName = `_${eventName}`;\n      return this.get(methodName) !== undefined || this.get(eventName) !== undefined;\n    });\n  }),\n\n  /**\n   * Returns an object that contains a function for each action passed\n   * into the component. This object is passed into Fullcalendar.\n   */\n  hooks: computed(function() {\n    const actions = {};\n\n    this.get('usedEvents').forEach((eventName) => {\n\n      // create an event handler that runs the function inside an event loop.\n      actions[eventName] = (...args) => {\n        Ember.run.schedule('actions', this, () => {\n          this.invokeAction(eventName, ...args, this.$());\n        });\n      };\n    });\n\n    return actions;\n  }),\n\n\n  /////////////////////////////////////\n  // OBSERVERS\n  /////////////////////////////////////\n\n  /**\n   * Observe the events array for any changes and\n   * re-render if changes are detected\n   */\n  observeEvents: observer('events.[]', function () {\n     const fc = this.$();\n     fc.fullCalendar('removeEvents');\n     fc.fullCalendar('addEventSource', this.get('events'));\n  }),\n\n  /**\n   * Observe the eventSources array for any changes and\n   * re-render if changes are detected\n   */\n  observeEventSources: observer('eventSources.[]', function () {\n     const fc = this.$();\n     fc.fullCalendar('removeEventSources');\n     this.get('eventSources').forEach(function(source){\n       fc.fullCalendar('addEventSource', source);\n     });\n  }),\n\n  /**\n   * Observes the resources array and refreshes the resource view\n   * if any changes are detected\n   * @type {[type]}\n   */\n  observeResources: observer('resources.[]', function() {\n    const fc = this.$();\n    fc.fullCalendar('refetchResources');\n  }),\n\n  /**\n   * Observes the 'viewName' property allowing FullCalendar view to be\n   * changed from outside of the component.\n   */\n  viewNameDidChange: Ember.observer('viewName', function() {\n    const viewName = this.get('viewName');\n    const viewRange = this.get('viewRange');\n    this.$().fullCalendar('changeView', viewName, viewRange);\n\n    // Call action if it exists\n    if (this.get('onViewChange')) {\n      this.get('onViewChange')(viewName, viewRange);\n    }\n  }),\n\n  /**\n   * Observes `date` property allowing date to be changed from outside\n   * of the component.\n   */\n  dateDidChange: Ember.observer('date', function() {\n    let date = this.get('date');\n    this.$().fullCalendar('gotoDate', date);\n  })\n\n});\n","/home/travis/build/npmtest/node-npmtest-ember-fullcalendar/node_modules/ember-fullcalendar/app/components/full-calendar.js":"export { default } from 'ember-fullcalendar/components/full-calendar';"}